openapi: 3.0.0
info:
  version: 1.0.0
  title: Task Manager API
  description: Task Manager to handle ToDo's
servers:
  - url: http://localhost:3000/api/
tags:
  - name: lists
  - name: tasks
  - name: users
  - name: login
paths:
  /lists/{ownerId}:
    get:
      tags:
        - lists
      description: Returns a specific User's Lists
      parameters:
        - name: ownerId
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Get all Lists
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/List'
        '500':
          description: Can't get Lists!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /lists/:
    post:
      tags:
        - lists
      description: Creates a new List
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/List'
      security:
        - bearerAuth: []
      responses:
        '201':
          description: New list saved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
        '500':
          description: List could not saved!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /lists/{listId}:
    delete:
      tags:
        - lists
      description: Deletes the List with the given ID
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '204':
          description: List deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
        '500':
          description: List could not deleted!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'   
  /lists/{listId}/tasks:
    get:
      tags:
        - tasks
      description: Returns a list of all tasks in a specific List
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Get all Tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '500':
          description: Can't get Tasks!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - tasks
      description: Create a task in a specific List
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '500':
          description: Task could not created!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /lists/{listId}/tasks/{taskId}:
    put:
      tags:
        - tasks
      description: Update a task in a specific list
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: string
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Task could not updated!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - tasks
      description: Delete a task in a specific list
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: string
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Task deleted successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '500':
          description: Task could not deleted!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users:
    post:
      tags:
        - users
      description: Creates a new User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: New user created successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500':
          description: User could not created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /login:
    post:
      tags:
        - login
      description: Logs in the User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: User's email
                password:
                  type: string
                  description: User's password
              required:
                - email
                - password
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User successfully authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    description: Access token for the user's session
        '400':
          description: Missing email or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Invalid email or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    List:
      type: object
      required:
        - title
        - ownerId
      properties:
        title:
          type: string
        ownerId:
          type: string
        tasks:
          type: array
    Task:
      type: object
      required:
        - title
        - _listId
      properties:
        title:
          type: string
        _listId:
          type: string
        completed:
          type: boolean
          default: false
    User:
      type: object
      required:
        - email
        - password
        - nickName
      properties:
        email:
          type: string
        password:
          type: string
        nickName:
          type: string
        lists:
          type: array
    Error:
      type: object
      required:
        - message
        - has_error
      properties:
        message:
          type: string
        has_error:
          type: boolean
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []